import streamlit as st
import pandas as pd
import numpy as np
import json
from google import genai
from google.genai.errors import APIError
from math import log1p

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh",
    layout="wide"
)

st.markdown("<h1 style='color: green;'>AI ƒê√ÅNH GI√Å PH∆Ø∆†NG √ÅN KINH DOANH üìà</h1>", unsafe_allow_html=True)
st.caption("·ª®ng d·ª•ng tr√≠ch xu·∫•t th√¥ng tin t√†i ch√≠nh t·ª´ vƒÉn b·∫£n v√† t√≠nh to√°n hi·ªáu qu·∫£ ƒë·∫ßu t∆∞.")

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u tr·ªØ c√°c tham s·ªë ƒë√£ tr√≠ch xu·∫•t
if 'params' not in st.session_state:
    st.session_state.params = None
if 'cashflow_df' not in st.session_state:
    st.session_state.cashflow_df = None
if 'metrics' not in st.session_state:
    st.session_state.metrics = None
if 'file_content' not in st.session_state:
    st.session_state.file_content = ""

# --- A. H√ÄM TR√çCH XU·∫§T D·ªÆ LI·ªÜU B·∫∞NG AI (GOAL 1) ---
def extract_data_with_ai(prompt_content, api_key):
    """G·ª≠i n·ªôi dung vƒÉn b·∫£n t·ªõi Gemini ƒë·ªÉ tr√≠ch xu·∫•t v√† tr·∫£ v·ªÅ JSON."""
    
    if not api_key:
        return "L·ªói: Thi·∫øu Kh√≥a API 'GEMINI_API_KEY'.", None

    # ƒê·ªãnh nghƒ©a c·∫•u tr√∫c JSON ƒë·∫ßu ra b·∫Øt bu·ªôc
    json_schema = {
        "type": "OBJECT",
        "properties": {
            "V·ªën_Dau_Tu": {"type": "NUMBER", "description": "V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (t·ª∑ ƒë·ªìng, s·ªë tuy·ªát ƒë·ªëi)"},
            "Dong_Doi_Du_An": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n (s·ªë nƒÉm)"},
            "Doanh_Thu_Nam": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (t·ª∑ ƒë·ªìng)"},
            "Chi_Phi_Nam": {"type": "NUMBER", "description": "Chi ph√≠ h√†ng nƒÉm (t·ª∑ ƒë·ªìng)"},
            "WACC_Phan_Tram": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën (WACC) d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm (v√≠ d·ª•: 13 cho 13%)"},
            "Thue_TNDN_Phan_Tram": {"type": "NUMBER", "description": "Thu·∫ø TNDN d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm (v√≠ d·ª•: 20 cho 20%)"}
        },
        "required": ["V·ªën_Dau_Tu", "Dong_Doi_Du_An", "Doanh_Thu_Nam", "Chi_Phi_Nam", "WACC_Phan_Tram", "Thue_TNDN_Phan_Tram"]
    }
    
    system_prompt = (
        "B·∫°n l√† tr·ª£ l√Ω tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh. H√£y ƒë·ªçc n·ªôi dung vƒÉn b·∫£n d∆∞·ªõi ƒë√¢y v√† tr√≠ch xu·∫•t s√°u ch·ªâ ti√™u t√†i ch√≠nh. "
        "Y√™u c·∫ßu T·∫§T C·∫¢ c√°c gi√° tr·ªã ph·∫£i l√† S·ªê (kh√¥ng c√≥ ƒë∆°n v·ªã ti·ªÅn t·ªá, kh√¥ng c√≥ k√Ω hi·ªáu %, ch·ªâ d√πng d·∫•u ch·∫•m l√† d·∫•u th·∫≠p ph√¢n). "
        "ƒê∆∞a ra k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo schema ƒë√£ cung c·∫•p. N·∫øu kh√¥ng t√¨m th·∫•y m·ªôt tham s·ªë, h√£y tr·∫£ v·ªÅ 0."
    )
    
    user_prompt = f"Tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh t·ª´ vƒÉn b·∫£n sau:\n\n{prompt_content}"

    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=user_prompt,
            config=genai.types.GenerateContentConfig(
                system_instruction=system_prompt,
                response_mime_type="application/json",
                response_schema=json_schema
            )
        )
        
        # Parse JSON
        params = json.loads(response.text)
        return "Tr√≠ch xu·∫•t th√†nh c√¥ng!", params
    
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}", None
    except json.JSONDecodeError:
        return "L·ªói ph√¢n t√≠ch JSON: AI kh√¥ng tr·∫£ v·ªÅ c·∫•u tr√∫c JSON h·ª£p l·ªá.", None
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}", None

# --- B. H√ÄM T√çNH TO√ÅN D√íNG TI·ªÄN V√Ä CH·ªà S·ªê (GOAL 2 & 3) ---

def calculate_financial_metrics(params):
    """T√≠nh to√°n b·∫£ng d√≤ng ti·ªÅn v√† c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP."""
    
    # L·∫•y tham s·ªë (ƒë·∫£m b·∫£o chuy·ªÉn ƒë·ªïi ph·∫ßn trƒÉm v·ªÅ s·ªë th·∫≠p ph√¢n)
    C0 = params.get('V·ªën_Dau_Tu')
    T = params.get('Dong_Doi_Du_An')
    R = params.get('Doanh_Thu_Nam')
    C = params.get('Chi_Phi_Nam')
    WACC = params.get('WACC_Phan_Tram') / 100.0 if params.get('WACC_Phan_Tram') else 0.0
    Tax = params.get('Thue_TNDN_Phan_Tram') / 100.0 if params.get('Thue_TNDN_Phan_Tram') else 0.0
    
    if T <= 0 or C0 <= 0:
        return "D√≤ng ƒë·ªùi d·ª± √°n v√† V·ªën ƒë·∫ßu t∆∞ ph·∫£i l·ªõn h∆°n 0.", None, None

    # 1. T√≠nh Kh·∫•u hao (D) - Gi·∫£ ƒë·ªãnh kh·∫•u hao ƒë∆∞·ªùng th·∫≥ng
    D = C0 / T
    
    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn (NƒÉm 0 -> NƒÉm T)
    years = list(range(T + 1))
    
    # Kh·ªüi t·∫°o c√°c list d√≤ng ti·ªÅn
    EBT_list = [-C0] # EBT kh√¥ng li√™n quan nƒÉm 0
    Tax_list = [0.0]
    NI_list = [-C0] # NI kh√¥ng li√™n quan nƒÉm 0
    ACF_list = [-C0] # D√≤ng ti·ªÅn chi·∫øt kh·∫•u (Chi ph√≠)
    
    # T√≠nh to√°n cho c√°c nƒÉm 1 ƒë·∫øn T
    for year in range(1, T + 1):
        # EBT: L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø
        EBT = R - C - D
        
        # Tax: Thu·∫ø TNDN (ch·ªâ t√≠nh khi EBT > 0)
        Tax_amount = max(0, EBT) * Tax
        
        # NI: L·ª£i nhu·∫≠n sau thu·∫ø
        NI = EBT - Tax_amount
        
        # ACF: D√≤ng ti·ªÅn ho·∫°t ƒë·ªông thu·∫ßn (NI + Kh·∫•u hao)
        ACF = NI + D
        
        EBT_list.append(EBT)
        Tax_list.append(Tax_amount)
        NI_list.append(NI)
        ACF_list.append(ACF)

    # T·∫°o DataFrame d√≤ng ti·ªÅn
    cashflow_df = pd.DataFrame({
        'NƒÉm (t)': years,
        'Doanh thu (R)': [0.0] + [R] * T,
        'Chi ph√≠ (C)': [0.0] + [C] * T,
        'Kh·∫•u hao (D)': [0.0] + [D] * T,
        'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)': EBT_list,
        'Thu·∫ø TNDN (20%)': Tax_list,
        'L·ª£i nhu·∫≠n sau thu·∫ø (NI)': NI_list,
        'D√≤ng ti·ªÅn thu·∫ßn (ACF)': ACF_list
    })
    
    # 3. T√≠nh to√°n c√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ (Goals 3)
    
    # Chuy·ªÉn ƒë·ªïi ACF_list sang m·∫£ng numpy ƒë·ªÉ t√≠nh to√°n
    np_acf = np.array(ACF_list)
    
    # a. NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)
    discount_factors = [1 / ((1 + WACC)**t) for t in years]
    NPV = np.sum(np_acf * discount_factors)
    
    # b. IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô) - D√πng np.irr
    try:
        IRR = np.irr(np_acf)
    except:
        IRR = np.nan
        
    # c. PP (Th·ªùi gian ho√†n v·ªën) & d. DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    
    cumulative_cf = np_acf.cumsum()
    cumulative_dcf = (np_acf * discount_factors).cumsum()
    
    PP = 'Kh√¥ng ho√†n v·ªën'
    DPP = 'Kh√¥ng ho√†n v·ªën'
    
    # T√≠nh PP
    for i in range(1, T + 1):
        if cumulative_cf[i] >= 0:
            # NƒÉm tr∆∞·ªõc khi ho√†n v·ªën
            year_prev = i - 1
            # Ph·∫ßn ti·ªÅn c·∫ßn b√π ƒë·∫Øp trong nƒÉm ƒë√≥
            balance_needed = -cumulative_cf[i-1]
            # D√≤ng ti·ªÅn kh√¥ng chi·∫øt kh·∫•u nƒÉm ho√†n v·ªën
            cf_year = ACF_list[i]
            PP = year_prev + (balance_needed / cf_year)
            break

    # T√≠nh DPP
    for i in range(1, T + 1):
        if cumulative_dcf[i] >= 0:
            # NƒÉm tr∆∞·ªõc khi ho√†n v·ªën c√≥ chi·∫øt kh·∫•u
            year_prev = i - 1
            # Ph·∫ßn ti·ªÅn c·∫ßn b√π ƒë·∫Øp trong nƒÉm ƒë√≥
            balance_needed = -(np_acf * discount_factors)[i-1] # Gi√° tr·ªã chi·∫øt kh·∫•u l≈©y k·∫ø nƒÉm tr∆∞·ªõc ƒë√≥
            # D√≤ng ti·ªÅn chi·∫øt kh·∫•u nƒÉm ho√†n v·ªën
            dcf_year = (np_acf * discount_factors)[i]
            DPP = year_prev + (balance_needed / dcf_year)
            break
            
    metrics = {
        'NPV': NPV,
        'IRR': IRR,
        'PP': PP,
        'DPP': DPP,
    }
    
    return "T√≠nh to√°n th√†nh c√¥ng!", cashflow_df, metrics

# --- C. H√ÄM PH√ÇN T√çCH CH·ªà S·ªê B·∫∞NG AI (GOAL 4) ---
def get_analysis_by_ai(cashflow_df, metrics, params, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë v√† d√≤ng ti·ªÅn ƒë·∫øn Gemini ƒë·ªÉ ph√¢n t√≠ch."""
    
    if not api_key:
        return "L·ªói: Thi·∫øu Kh√≥a API 'GEMINI_API_KEY'."
        
    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho AI
    project_params = pd.DataFrame(params.items(), columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã']).to_markdown(index=False)
    cashflow_md = cashflow_df.style.format(precision=2).to_markdown()
    
    # ƒê·ªãnh d·∫°ng c√°c ch·ªâ s·ªë cho AI
    npv_str = f"{metrics['NPV']:,.2f} t·ª∑ VND"
    irr_str = f"{metrics['IRR'] * 100:,.2f}%" if not np.isnan(metrics['IRR']) else "Kh√¥ng x√°c ƒë·ªãnh"
    pp_str = f"{metrics['PP']:,.2f} nƒÉm" if isinstance(metrics['PP'], (int, float)) else metrics['PP']
    dpp_str = f"{metrics['DPP']:,.2f} nƒÉm" if isinstance(metrics['DPP'], (int, float)) else metrics['DPP']

    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞ v√† th·∫©m ƒë·ªãnh d·ª± √°n.
    H√£y ph√¢n t√≠ch t√≠nh kh·∫£ thi v√† r·ªßi ro c·ªßa d·ª± √°n d·ª±a tr√™n c√°c th√¥ng s·ªë v√† ch·ªâ s·ªë sau:
    
    **TH√îNG S·ªê D·ª∞ √ÅN:**
    {project_params}
    
    **C√ÅC CH·ªà S·ªê HI·ªÜU QU·∫¢ D·ª∞ √ÅN:**
    - NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn): {npv_str}
    - IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô): {irr_str}
    - PP (Th·ªùi gian ho√†n v·ªën): {pp_str}
    - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {dpp_str}
    
    **D√íNG TI·ªÄN D·ª∞ √ÅN (t·ª∑ ƒë·ªìng):**
    {cashflow_md}
    
    **Y√™u c·∫ßu ph√¢n t√≠ch:**
    1. **ƒê√°nh gi√° Kh·∫£ thi:** Nh·∫≠n x√©t NPV v√† so s√°nh IRR v·ªõi WACC (13%).
    2. **ƒê√°nh gi√° R·ªßi ro Thanh kho·∫£n:** Nh·∫≠n x√©t v·ªÅ PP v√† DPP.
    3. **K·∫øt lu·∫≠n:** T√≥m t·∫Øt v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ch·∫•p thu·∫≠n/t·ª´ ch·ªëi ho·∫∑c c·∫ßn ƒëi·ªÅu ch·ªânh/y√™u c·∫ßu th√™m d·ªØ li·ªáu (n·∫øu NPV < 0). Vi·∫øt nh·∫≠n x√©t chuy√™n nghi·ªáp (kho·∫£ng 3 ƒëo·∫°n).
    """

    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# -------------------------- B·∫ÆT ƒê·∫¶U GIAO DI·ªÜN STREAMLIT --------------------------

api_key = st.secrets.get("GEMINI_API_KEY")

# --- M·ª•c 1: T·∫£i File v√† Tr√≠ch xu·∫•t D·ªØ li·ªáu ---
st.header("1. Tr√≠ch xu·∫•t Th√¥ng s·ªë D·ª± √°n (AI)")
col_file, col_text = st.columns([1, 2])

with col_file:
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n File .txt (Ho·∫∑c copy-paste n·ªôi dung Word v√†o b√™n c·∫°nh)",
        type=['txt']
    )
    if uploaded_file is not None:
        try:
            string_data = uploaded_file.getvalue().decode("utf-8")
            st.session_state.file_content = string_data
        except Exception as e:
            st.error(f"L·ªói ƒë·ªçc file: {e}")

with col_text:
    # Text area ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ copy-paste tr·ª±c ti·∫øp t·ª´ Word
    st.session_state.file_content = st.text_area(
        "N·ªôi dung vƒÉn b·∫£n (T·ª´ Word)",
        value=st.session_state.file_content,
        height=300,
        placeholder="D√°n n·ªôi dung ph∆∞∆°ng √°n kinh doanh v√†o ƒë√¢y. V√≠ d·ª•: 'D·ª± √°n c√≥ v·ªën ƒë·∫ßu t∆∞ 30 t·ª∑, d√≤ng ƒë·ªùi 10 nƒÉm. Doanh thu 5 t·ª∑, chi ph√≠ 2 t·ª∑, WACC 13%, Thu·∫ø 20%.'"
    )

if st.button("üöÄ L·ªçc d·ªØ li·ªáu t√†i ch√≠nh (D√πng AI)"):
    if not st.session_state.file_content.strip():
        st.warning("Vui l√≤ng nh·∫≠p ho·∫∑c t·∫£i l√™n n·ªôi dung ph∆∞∆°ng √°n kinh doanh.")
    else:
        with st.spinner('ƒêang g·ª≠i n·ªôi dung v√† ch·ªù Gemini tr√≠ch xu·∫•t th√¥ng tin...'):
            message, params = extract_data_with_ai(st.session_state.file_content, api_key)
            
            if params:
                st.session_state.params = params
                st.success(message)
                
                # T√≠nh to√°n ngay sau khi tr√≠ch xu·∫•t th√†nh c√¥ng
                calc_message, df, metrics = calculate_financial_metrics(st.session_state.params)
                st.session_state.cashflow_df = df
                st.session_state.metrics = metrics
                
                # Hi·ªÉn th·ªã th√¥ng s·ªë ƒë√£ tr√≠ch xu·∫•t
                st.subheader("Th√¥ng s·ªë ƒë√£ Tr√≠ch xu·∫•t (ƒê∆°n v·ªã: T·ª∑ VND tr·ª´ khi c√≥ ghi ch√∫)")
                st.dataframe(pd.DataFrame(st.session_state.params.items(), columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã']).style.format(precision=2), use_container_width=True)
                
            else:
                st.error(message)

# --- M·ª•c 2: B·∫£ng D√≤ng ti·ªÅn (Goal 2) ---
if st.session_state.cashflow_df is not None:
    st.markdown("---")
    st.header("2. B·∫£ng D√≤ng ti·ªÅn c·ªßa D·ª± √°n (T·ª∑ VND)")
    st.dataframe(st.session_state.cashflow_df.style.format(
        {col: '{:,.2f}' for col in st.session_state.cashflow_df.columns}
    ), use_container_width=True)

    # --- M·ª•c 3: Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ (Goal 3) ---
    st.markdown("---")
    st.header("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ ƒê·∫ßu t∆∞")
    
    if st.session_state.metrics:
        m = st.session_state.metrics
        
        # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
        npv_str = f"{m['NPV']:,.2f} t·ª∑ VND"
        irr_str = f"{m['IRR'] * 100:,.2f}%" if not np.isnan(m['IRR']) else "Kh√¥ng x√°c ƒë·ªãnh"
        pp_str = f"{m['PP']:,.2f} nƒÉm" if isinstance(m['PP'], (int, float)) else m['PP']
        dpp_str = f"{m['DPP']:,.2f} nƒÉm" if isinstance(m['DPP'], (int, float)) else m['DPP']

        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)", npv_str)
        with col2:
            st.metric("IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô)", irr_str)
        with col3:
            st.metric("PP (Th·ªùi gian ho√†n v·ªën)", pp_str)
        with col4:
            st.metric("DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", dpp_str)

    # --- M·ª•c 4: Ph√¢n t√≠ch AI (Goal 4) ---
    st.markdown("---")
    st.header("4. Nh·∫≠n x√©t Chuy√™n s√¢u (AI)")
    
    if st.button("üí¨ Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n"):
        if api_key:
            with st.spinner("ƒêang g·ª≠i ch·ªâ s·ªë v√† ch·ªù Gemini ph√¢n t√≠ch..."):
                ai_analysis = get_analysis_by_ai(
                    st.session_state.cashflow_df, 
                    st.session_state.metrics, 
                    st.session_state.params, 
                    api_key
                )
                st.info(ai_analysis)
        else:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

elif st.session_state.params is not None and st.session_state.cashflow_df is None:
    st.error("L·ªói t√≠nh to√°n: Vui l√≤ng ki·ªÉm tra l·∫°i c√°c th√¥ng s·ªë tr√≠ch xu·∫•t (ƒê·∫∑c bi·ªát l√† D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng).")
